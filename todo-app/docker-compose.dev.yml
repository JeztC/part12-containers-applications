services:
  todo-backend:
    image: app_backend
    volumes:
      - ./:/usr/src/app
    ports:
      - 3001:3001
    environment:
      - REDIS_URL=redis://default:@localhost:6379/0
      - MONGO_URL=mongodb://the_username:the_password@localhost:3456/the_database
    container_name: app_backend # This will name the container app_backend
    depends_on:
      - mongo
      - redis

  mongo:
    image: mongo
    ports:
      - 3456:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: the_database
    volumes:
      - ./mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
      - mongo_data:/data/db

  redis:
    image: redis
    ports:
      - 6379:6379
    command: ['redis-server', '--appendonly', 'yes']
    volumes: # Declare the volume
      - ./redis_data:/data

  app:
    image: app_frontend
    build:
      context: . # The context will pick this directory as the "build context"
      dockerfile: dev.Dockerfile # This will simply tell which dockerfile to read
    environment:
      - REACT_APP_BACKEND_URL=http://localhost:3001/api/
    volumes:
      - ./:/usr/src/app # The path can be relative, so ./ is enough to say "the same location as the docker-compose.yml"
    ports:
      - 3000:3000
    container_name: app_frontend # This will name the container app_frontend

  nginx:
    image: nginx:1.20.1
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 8080:80
    container_name: reverse-proxy
    depends_on:
      - app # wait for the frontend container to be started
      - todo-backend